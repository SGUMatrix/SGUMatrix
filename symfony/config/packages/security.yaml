security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\UserProfile:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
    # https://symfony.com/doc/current/security/user_provider.html
    # In this example, users are stored via Doctrine in the database
    # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
    # To load users from somewhere else: https://symfony.com/doc/current/security/user_provider.html#creating-a-custom-user-provider
        app_user_provider:
            entity: { class: App\Entity\UserProfile, property: username }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppAuthenticator
                # This allows the user to login by submitting a username and password
                # Reference: https://symfony.com/doc/current/security/form_login_setup.html
                form_login:
                    # The route name that the login form submits to
                    check_path: security_login
                    # The name of the route where the login form lives
                    # When the user tries to access a protected page, they are redirected here
                    login_path: security_login
                    # Secure the login form against CSRF
                    # Reference: https://symfony.com/doc/current/security/csrf.html
                    enable_csrf: true
                    # The page users are redirect to when there is no previous page stored in the
                    # session (for example when the users access directly to the login page).
                    default_target_path: blog_index
            logout:
                path: app_logout
                target: app_root
                # where to redirect after logout
                # target: app_any_route
            # needed because in tests we redefine the 'main' firewall to use
            # HTTP Basic instead of the login form, so this firewall has
            # multiple authenticators
            # See https://symfony.com/doc/current/security/experimental_authenticators.html#configuring-the-authentication-entry-point


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(%app_locales%)/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    # this configuration simplifies testing URLs protected by the security mechanism
    # See https://symfony.com/doc/current/testing/http_authentication.html
    security:
        firewalls:
            main:
                http_basic: ~